import json 

def read_json(filename):  # type: (str) -> dict
    try: 
        with open(filename, "r") as f: 
            data = json.loads(f.read().decode('utf-8'))  # Decode as UTF-8 for Python 2
    except: 
        raise Exception("Reading {} file encountered an error".format(filename)) 

    return data 

def normalize_json(data):  # type: (dict) -> dict
    new_data = dict() 
    for key, value in data.items(): 
        if not isinstance(value, dict): 
            new_data[key] = value 
        else: 
            for k, v in value.items(): 
                new_data[key + "_" + k] = v 
    return new_data 

def generate_csv_data(data):  # type: (dict) -> str
    # Defining CSV columns in a list to maintain 
    # the order 
    csv_columns = data.keys() 

    # Generate the first row of CSV 
    csv_data = ",".join(csv_columns) + "\n"

    # Generate the single record present 
    new_row = list() 
    for col in csv_columns: 
        new_row.append(str(data[col])) 

    # Concatenate the record with the column information 
    # in CSV format 
    csv_data += ",".join(new_row) + "\n"

    return csv_data 

def write_to_file(data, filepath):  # type: (str, str) -> bool
    try: 
        with open(filepath, "w+") as f: 
            f.write(data.encode('utf-8'))  # Encode as UTF-8 for Python 2
    except: 
        raise Exception("Saving data to {} encountered an error".format(filepath)) 

def main(): 
    # Read the JSON file as python dictionary 
    data = read_json(filename="article.json") 

    # Normalize the nested python dict 
    new_data = normalize_json(data=data) 

    # Pretty print the new dict object 
    print "New dict:", new_data  # Print statement for Python 2

    # Generate the desired CSV data 
    csv_data = generate_csv_data(data=new_data) 

    # Save the generated CSV data to a CSV file 
    write_to_file(data=csv_data, filepath="data.csv") 

if __name__ == '__main__': 
    main() 
