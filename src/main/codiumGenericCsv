import json


def flatten_json(y, prefix=""):
    """Recursively flattens a nested JSON object, creating unique keys.

    Args:
        y (dict or list): The JSON object to flatten.
        prefix (str, optional): A prefix to prepend to keys for uniqueness.
            Defaults to "".

    Returns:
        dict: A flattened dictionary with unique keys.
    """

    if isinstance(y, dict):
        items = []
        for key, value in y.items():
            new_key = prefix + key if prefix else key
            items.extend(flatten_json(value, new_key + "_").items())
        return dict(items)
    elif isinstance(y, list):
        items = []
        for i, value in enumerate(y):
            new_key = prefix + str(i) if prefix else str(i)
            items.extend(flatten_json(value, new_key + "_").items())
        return dict(items)
    else:
        return {prefix: y}  # Handle primitive values with a prefix


def json_to_csv(json_data):
    """Converts a nested JSON object/array of objects to CSV strings.

    Args:
        json_data (dict or list): The JSON object or array to convert.

    Returns:
        list: A list of CSV strings, one for each entry in the JSON data.
    """

    csv_strings = []
    if isinstance(json_data, list):
        for item in json_data:
            flattened_data = flatten_json(item)
            headers = ",".join(flattened_data.keys())
            rows = [",".join([str(v) for v in flattened_data.values()])]
            csv_strings.append("\n".join([headers] + rows))
    else:  # Single JSON object
        flattened_data = flatten_json(json_data)
        headers = ",".join(flattened_data.keys())
        rows = [",".join([str(v) for v in flattened_data.values()])]
        csv_strings.append("\n".join([headers] + rows))
    return csv_strings


# Example usage
json_data1 = {  # Single nested object
    "name": "Alice",
    "address": {
        "street": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zip": 12345
    }
}

json_data2 = [  # Array of nested objects
    {
        "name": "Bob",
        "interests": ["music", "reading"]
    },
    {
        "name": "Charlie",
        "age": 30,
        "hobbies": ["hiking", "gaming"]
    }
]

csv_strings = json_to_csv(json_data1)
csv_strings.extend(json_to_csv(json_data2))  # Add CSVs from array

for csv_string in csv_strings:
    print(csv_string)
