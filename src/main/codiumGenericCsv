import json


def flatten_json(y, prefix=""):
    """Recursively flattens a nested JSON object, creating unique keys.

    Args:
        y (dict or list): The JSON object to flatten.
        prefix (str, optional): A prefix to prepend to keys for uniqueness.
            Defaults to "".

    Returns:
        dict: A flattened dictionary with unique keys.
    """

    if isinstance(y, dict):
        items = []
        for key, value in y.items():
            new_key = prefix + key if prefix else key
            items.extend(flatten_json(value, new_key + "_").items())
        return dict(items)
    elif isinstance(y, list):
        items = []
        for i, value in enumerate(y):
            new_key = prefix + str(i) if prefix else str(i)
            items.extend(flatten_json(value, new_key + "_").items())
        return dict(items)
    else:
        return {prefix: y}  # Handle primitive values with a prefix


def json_to_csv(json_data):
    """Converts a nested JSON object to a CSV string.

    Args:
        json_data (dict or list): The JSON object to convert.

    Returns:
        str: The CSV representation of the JSON data.
    """

    flattened_data = flatten_json(json_data)
    headers = ",".join(flattened_data.keys())
    rows = [",".join([str(v) for v in flattened_data.values()])]
    return "\n".join([headers] + rows)


# Example usage
json_data = {
    "name": "Alice",
    "address": {
        "street": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zip": 12345
    },
    "phone_numbers": ["555-123-4567", "888-765-4321"],
    "interests": ["music", "reading", "travel"]
}

csv_string = json_to_csv(json_data)
print(csv_string)
